#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_help() {
    echo "Usage: ./setup OPTION..."
    echo "Utility for linking system configuration files to files contained in this repository."
    echo "Also gives the opportunity to remove files that are not linked."
    echo
    echo "options"
    echo "  -h --help          Displays this help and exits"
    echo "  -f --force         Automatically confirms linking and the deletion of files"
    echo "  -r -d --remove     Automatically confirms the deletion of files"
    echo "  -l --link          Automatically confirms the linking of files"
}

path_exists() {
     [ -L "$1" ] || [ -f "$1" ] || [ -d "$1" ]
}

# This exists because bash includes '..' and '.' in the `in` keyword
valid_basename() {
    [ "$1" != "." ] && [ "$1" != ".." ]
}

setup_configuration() {
    local source_target_root=$1
    local local_machine_target_root=$2
    local no_deletion_confirmation=$3
    local no_linking_confirmation=$4
    local confirm
    # Allows for user to be notified if nothing was done
    local something_done=1

    for file in "$source_target_root"/.* "$source_target_root"/*; do
        valid_basename "$(basename "$file")" || continue

        local_path="$local_machine_target_root/$(basename "$file")"

        if path_exists "$local_path" && ! [[ -L "$local_path" ]]; then
            something_done=0
            if [[ $no_deletion_confirmation != "yes" ]]; then
                echo -e "Located: ${YELLOW}${local_path}${NC}, would you like to ${RED}remove${NC} this system file? (type ${GREEN}'yes'${NC} to remove)"
                read -r confirm
            fi

            if [[ $no_deletion_confirmation = 'yes' ]] || [[ $confirm = "yes" ]]; then
                rm "$local_path"
                echo -e "${RED}Removed${NC} $local_path\n"
            fi
        fi

        # Checks after has file/directory has possibly been deleted
        if ! path_exists "$local_path"; then
            something_done=0
            if [[ $no_linking_confirmation != 'yes' ]]; then
                echo -e "${BLUE}Link${NC} ${YELLOW}${source_target_root}/$(basename "$local_path")${NC} to local machine at ${GREEN}${local_path}${NC}? (type ${GREEN}'yes'${NC} to link)"
                read -r confirm
            fi

            if [[ $no_linking_confirmation = 'yes' ]] || [[ $confirm = "yes" ]]; then
                 ln -s "${source_target_root}/$(basename "$local_path")" "$local_path"
                 echo -e "${BLUE}Linked${NC} ${YELLOW}${source_target_root}/$(basename "$local_path")${NC} to ${YELLOW}${local_path}${NC}\n"
            fi
        fi
    done

    if [[ $something_done = 1 ]]; then
        if [[ $source_target_root == *"config"* ]]; then
            echo "Nothing to do with configuration files"
            return
        fi
        echo "Nothing to do with user home files"
    fi
}

while getopts ":hfrdl-:" arg; do
    user_wants_auto_deletion='no'
    user_wants_auto_linking='no'

    case "$arg" in
        h)
            print_help
            exit
            ;;
        r)
            user_wants_auto_deletion='yes'
            ;;
        d)
            user_wants_auto_deletion='yes'
            ;;
        l)
            user_wants_auto_linking='yes'
            ;;
        f)
            user_wants_auto_deletion='yes'
            user_wants_auto_linking='yes'
            ;;
        -)
            case "$OPTARG" in
                help)
                    print_help
                    exit
                    ;;
                remove)
                    user_wants_auto_deletion='yes'
                    ;;
                link)
                    user_wants_auto_linking='yes'
                    ;;
                force)
                    user_wants_auto_deletion='yes'
                    user_wants_auto_linking='yes'
                    ;;
                *)
                    echo "./setup: illegal option --$OPTARG"
                    print_help
                    exit
                    ;;
            esac
            ;;
        \?)
            print_help
            exit
            ;;
    esac
done

script_path=$(dirname "$(readlink -f "$0")")
source_home_path="${script_path}/home"
source_config_path="${script_path}/.config"
local_machine_home_path="$HOME"
local_machine_config_path="$HOME/.config"

setup_configuration "$source_home_path" "$local_machine_home_path" "$user_wants_auto_deletion" "$user_wants_auto_linking"
setup_configuration "$source_config_path" "$local_machine_config_path" "$user_wants_auto_deletion" "$user_wants_auto_linking"

