#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

does_not_exist() {
     [ ! -L "$1" ] && [ ! -f "$1" ] && [ ! -d "$1" ]
}

# This exists because bash includes '..' and '.' in the `in` keyword
valid_basename() {
    [ "$1" != "." ] && [ "$1" != ".." ]
}

# Takes in a target (source) root_dest (assumes the full dest will contain the basename of
#  the same file in the code base and a value confirming if the link should happen
link_configuration_file() {
    local target="$1"
    local root_dest="$2"
    local confirmed="$3"
    local dest="$root_dest/$(basename "$target")"

    if does_not_exist "$dest"; then
        [ "$confirmed" = "yes" ] || echo -e "Source: ${YELLOW}${target}${NC} \n-> Local machine: ${GREEN}${dest}${NC}"
        [ "$confirmed" = "yes" ] && { ln -s "$target" "$dest"; echo -e "Linked ${YELLOW}${target}${NC}"; }
        any_valid_exist=0
    fi
    return $any_valid_exist
}

link_all_source_to_local_machine() {
    local source_target_root=$1
    local local_machine_target_root=$2

    # Determines if any values were found - defaults to none found
    any_valid_exist=1

    # Iterate over to show values to user before confirmation (hence final argm)
    for directory in "$source_target_root"/.* "$source_target_root"/*; do
        if valid_basename "$(basename "$directory")"; then
           link_configuration_file "$directory" "$local_machine_target_root"
        fi
    done

    # Return value is not pure so this will work even if most recent call is a failure

    if [ "$?" != 0 ]; then
        echo -e "Nothing found to link for ${GREEN}${source_target_root}${NC}, continuing...\n"
        return 0
    fi

    echo -e "\nPlease confirm before linking (type ${GREEN}'yes'${NC})"
    local confirm
    read -r confirm

    if [ "$confirm" != "yes" ]; then
        echo -e "Okay, ${RED}Not${NC} linking the above files\n"
        return 0
    fi

    for directory in "$source_target_root"/.* "$source_target_root"/*; do
        if valid_basename "$(basename "$directory")"; then
            link_configuration_file "$directory" "$local_machine_target_root" "$confirm"
        fi
    done
}

source_home_path="$PWD/home"
source_config_path="$PWD/.config"
local_machine_home_path="$HOME"
local_machine_config_path="$HOME/.config"

# Each will display the values and then prompt the user before linking
link_all_source_to_local_machine "$source_home_path" "$local_machine_home_path"
link_all_source_to_local_machine "$source_config_path" "$local_machine_config_path"
